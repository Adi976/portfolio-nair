1b Develop a Python program to check whether a 
given number is palindrome or not and also count 
the number of occurrences of each digit in the input 
number.

st=input("Enter Input: ")
rev=st

if(rev==rev[::-1]):
    print(st,'is a palindrome')
else:
    print(st,'is not a palindrome')
    
#count instances
for i in set(st):
    print(i,' appears',st.count(str(i)),' times')

2aBinary to decimal

def bin2dec(bin):
    dec=0
    l=len(bin)
    for i  in range (l):
        dec=dec+int(bin[i])*(2**(l-i-1))
    return dec
def oct2hex(oct):
    dec=0
    l=len(oct)
    for i in range (l):
        dec=dec+int(oct[i])*(8**(l-i-1))
    octhex=''
    hex=['1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']
    while(dec>0):
        rem=dec%16
        octhex=octhex+hex[rem]
        dec=dec//16
    return octhex

bin=(input("Enter a binary number: "))
print('Binary to Decimal is ',bin2dec(bin))

oct=(input('Enter a octal number: '))
print('Octal to hexadecimal is ',oct2hex(oct))

2b Fibonacci

def fibo(num):
    if(num==1):
        return 0
    elif(num==2):
        return 1
    else:
        return (fibo(num-1)+fibo(num-2))

num=int(input("Enter a number: "))
if(num>0):
    print('Fibonacci:',fibo(num))
else:
    print("Error in input")

3a Count Frequency

sentence=input("Enter a sentence: ")

wordCnt=loCnt=digCnt=upCnt=0

wordCnt=sentence.split()

for ch in sentence:
    if ch>='0' and ch<='9':
        digCnt=digCnt+1
    if ch>='a' and ch <='z':
        loCnt=loCnt+1
    if ch>='A' and ch <='Z':
        upCnt=upCnt+1
       
print("This sentence has\n") 
print("words: ", len(wordCnt),"\n" "digits",digCnt, ) 
print("upper case letters",upCnt, "\n" "lower case letters ",loCnt) 

3b String Similarity

def compare(s,p):
    cnt=0
    l=min(len(s),len(p))
    for i in range (l):
        if(s[i]==p[i]):
          cnt+=1
    return cnt

s1=input("Enter String 1:")
s2=input("Enter String 2:")

cnt=compare(s1,s2)
mx=max(len(s1),len(s2))
similarity=(cnt/mx)*100
print("Similarity= ",similarity)

4a Bar Plot

import matplotlib.pyplot as plt

x=[1,2,3,4,5]
y=[24,34,12,43,31]

plt.bar(x,y)
plt.show()

4b Scatter Plot

import matplotlib.pyplot as plt

x=[1,2,3,4,5]
y=[12,14,16,18,20]

plt.scatter(x,y)
plt.show()

5a Histogram

import matplotlib.pyplot as plt
import random

x=[]
for i in range(0,11):
    x.append(random.randint(0,1001))

plt.hist(x,bins=4)
plt.show()

5b Pie chart

import matplotlib.pyplot as plt

x=[10,13,21,18,19]
labels=["S1","S2","S3","S4","S5"]

plt.pie(x,labels=labels,autopct='%1.1f%%')
plt.show()

6a Line Plot

import matplotlib.pyplot as plt

plt.plot([2,1,4,5,6])
plt.show()

6b Linear line plotting formatting

import matplotlib.pyplot as plt

x=[2,1,4,5,6]
y=[1,2,3,4,5]
plt.plot(x,y,color="yellow",marker='o',markerfacecolor='red')
plt.show()

7. Seaborn 

import seaborn as sns 
import matplotlib.pyplot as plt 
data = sns.load_dataset("iris")   
sns.lineplot(x="sepal_length", y="sepal_width", data=data)  
sns.set_style("darkgrid")  
plt.show() 

8a Bokeh Line Plot

from bokeh.plotting import figure,show,output_file

graph=figure(title="Bokeh Line Plot")
x=[1,2,3,4,5]
y=[5,4,3,2,1]
graph.line(x,x,legend_label="Line 1")
graph.line(y,x,legend_label="Line 2",line_color="green")
show(graph)

8b Bokeh multiple plots

from bokeh.plotting import figure
from bokeh.io import show
from bokeh.io import output_file
from bokeh.layouts import row

x=[1,2,3,4,5]
y=[5,4,3,2,1]
fig1=figure(title="Plot 1")
fig1.line(x,y)

fig2=figure(title="Plot 2")
x=y=list(range(10))

fig2.circle(x,y,size=5)
show(row(fig1,fig2))

9 Plotly

import plotly.express as px

df=px.data.iris()
fig=px.scatter_3d(df,x="sepal_width",y="sepal_length",z="petal_width",size="petal_length",size_max=20,color="species")
fig.show()

10a. Tesla stock

import pandas as pd
import plotly.express as px

url='Tesla.csv'
data=pd.read_csv(url)
data.head()

fig=px.line(data,x="Date",y="Close")
fig.show()

10b. Map

import plotly.graph_objects as go 
import plotly.express as px 
import pandas as pd
 
url='Places.csv'
data = pd.read_csv(url, header='infer') 
data.head() 

data = data.rename(columns = {'POIs':'Place'}) 
data.head() 

fig = px.scatter_mapbox(data, lat="LATITUDE", lon="LONGITUDE", hover_name="Place", 
hover_data=["Place"], color_discrete_sequence=["darkmagenta"], zoom=5.5, height=300) 
fig.update_layout(mapbox_style="open-street-map") 
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0}) 
fig.show() 
